using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using ServiceStack.Text;

namespace NGinnBPM.MessageBus.Impl
{
    public class ServiceStackMessageSerializer : ISerializeMessages
    {
        private Dictionary<string, Type> _types = new Dictionary<string, Type>();

        public bool UseFullAssemblyNames { get; set; }

        public ServiceStackMessageSerializer()
        {
            UseFullAssemblyNames = false;
        }

        private string TypeToString(Type t)
        {
            if (UseFullAssemblyNames)
                return t.AssemblyQualifiedName;
            else
                return string.Format("{0}, {1}", t.FullName, t.Assembly.GetName().Name);
            //return t.AssemblyQualifiedName;
        }

        private Type TypeFromString(string tn)
        {
            Type t;
            if (!_types.TryGetValue(tn, out t))
            {
                try
                {
                    t = Type.GetType(tn);
                }
                catch (Exception ex)
                {
                    throw new Exception(string.Format("Type not found: '{0}'", tn));
                }
                if (t == null) throw new Exception(string.Format("Type not found: '{0}'", tn));
                _types[tn] = t;
            }
            return t;
        }

        public void Serialize(object msg, TextWriter tw)
        {
            Type t = msg.GetType();
            string k = TypeToString(t);
            tw.WriteLine(k);
            JsonSerializer.SerializeToWriter(msg, t, tw);
            
        }

        public object Deserialize(TextReader tr)
        {
            
            string tn = tr.ReadLine();
            Type t = TypeFromString(tn);
            return JsonSerializer.DeserializeFromReader(tr, t);
        }
    }
}
